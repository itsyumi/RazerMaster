@model RazerMasterLibrary.Models.Products

@{
    ViewBag.Title = "Create";

}

<!-- content Start -->

<div class="content">
    <div class="animated fadeIn">
        <div class="row justify-content-center">
            <div class="col-10">
                <div class="card border-secondary mb-3">
                    <div class="card-header h5 font-weight-bold">Edit Product</div>
                    <div class="card-body text-secondary">

                        @using (Html.BeginForm("Create", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()

                            <div class="form-group row">
                                @Html.LabelFor(model => model.ProductName, "Product Name", htmlAttributes: new { @class = "col-sm-2 col-form-label text-danger" })

                                <div class="col-sm-10">
                                    @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group row">
                                @Html.LabelFor(model => model.CategoryID, "Category", htmlAttributes: new { @class = "col-sm-2 col-form-label text-danger" })

                                <div class="col-sm-4">
                                    @Html.DropDownList("CategoryID", (SelectList)(ViewBag.CategoryList), htmlAttributes: new { @class = "form-control" })
                                </div>

                                @Html.LabelFor(model => model.TagID, "Tag", htmlAttributes: new { @class = "col-sm-2 col-form-label text-danger" })
                                <div class="col-sm-4">
                                    @Html.DropDownList("TagID", (SelectList)(ViewBag.TagList), "None", htmlAttributes: new { @class = "form-control" })
                                </div>
                            </div>

                            <div class="form-group row">
                                @Html.LabelFor(model => model.OriginalPrice, "Original Price", htmlAttributes: new { @class = "col-sm-2 col-form-label text-danger" })
                                <div class="col-sm-4">
                                    @Html.EditorFor(model => model.OriginalPrice, new { htmlAttributes = new { @type = "number", @min = "0", @step = "0.01", @class = "form-control", @Value = "0" } })
                                    @Html.ValidationMessageFor(model => model.OriginalPrice, "", new { @class = "text-danger" })
                                </div>
                                @Html.LabelFor(model => model.SalePrice, "Sale Price", htmlAttributes: new { @class = "col-sm-2 col-form-label text-danger" })
                                <div class="col-sm-4">
                                    @Html.EditorFor(model => model.SalePrice, new { htmlAttributes = new { @type = "number", @min = "0", @step = "0.01", @class = "form-control", @Value = "0" } })
                                    @Html.ValidationMessageFor(model => model.SalePrice, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group row">
                                @Html.LabelFor(model => model.Sequence, htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                <div class="col-sm-4">
                                    @Html.EditorFor(model => model.Sequence, new { htmlAttributes = new { @class = "form-control", @min = "0", @Value = "0" } })
                                </div>
                                @Html.LabelFor(model => model.Stock, htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                <div class="col-sm-4">
                                    @Html.EditorFor(model => model.Stock, new { htmlAttributes = new { @class = "form-control", @min = "0", @Value = "0" } })
                                </div>
                            </div>

                            <div class="form-group row">
                                <label for="" class="col-sm-2 col-form-label">On/Off-shelf</label>
                                <div class="col-sm-10">
                                    <div class="form-check form-check-inline mt-1">
                                        @Html.RadioButtonFor(model => model.Status, "1", htmlAttributes: new { @class = "form-check-input", @checked = "checked" })On
                                    </div>
                                    <div class="form-check form-check-inline mt-1">
                                        @Html.RadioButtonFor(model => model.Status, "0", htmlAttributes: new { @class = "form-check-input" })Off
                                    </div>
                                </div>
                            </div>

                            <div class="form-group row">
                                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                <div class="col-sm-10">
                                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control",@id= "editor" } })
                                </div>
                            </div>

                            <div class="form-group row">
                                <label for="imgUpload" class="col-sm-2 col-form-label">Image Upload</label>
                                <div class="col-sm-10">
                                    <input type="file" name="files" id="file" multiple accept="image/*" data-show-upload="false" data-browse-on-zone-click="true" />
                                    <span class="text-danger">@ViewBag.ErrorMsg</span>
                                </div>

                                <div id="preview"></div>
                            </div>

                            <div class="form-group row">
                                @Html.LabelFor(model => model.StartSellTime, "Start Time", htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                <div class="col-sm-4">
                                    @Html.EditorFor(model => model.StartSellTime, new { htmlAttributes = new { @class = "form-control", @id = "startTime", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.StartSellTime, "", new { @class = "text-danger" })
                                </div>
                                @Html.LabelFor(model => model.EndSellTime, "End Time", htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                <div class="col-sm-4">
                                    @Html.EditorFor(model => model.EndSellTime, new { htmlAttributes = new { @class = "form-control", @id = "endTime", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.EndSellTime, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group row">
                                @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                <div class="col-sm-10">
                                    @Html.EditorFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                            </div>

                            @ViewBag.Str


                            <div class="form-group row justify-content-end">
                                <div class="col-sm-5 d-flex justify-content-end">
                                    <input type="submit" value="Create" class="btn btn-success m-1" />
                                    <a class="btn btn-secondary m-1" href="@Url.Action("Index")" role="button">Cancel</a>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div><!-- .animated -->
</div>
<!-- content Start -->




@section topCSS{
    <link href="~/assets/css/jquery.datetimepicker.css" rel="stylesheet" />

    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-fileinput/5.1.2/css/fileinput.min.css" media="all" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css" crossorigin="anonymous">
}


@section endJS{
    <script src="https://cdn.ckeditor.com/ckeditor5/22.0.0/classic/ckeditor.js"></script>
    <script>
        ClassicEditor
            .create(document.querySelector('#editor'))
            .catch(error => {
                console.error(error);
            });
    </script>


    <script src="https://code.jquery.com/jquery-3.5.1.min.js"
            integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
            crossorigin="anonymous"></script>
    <script src="~/assets/js/jquery.datetimepicker.full.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-fileinput/5.1.2/js/plugins/piexif.min.js" type="text/javascript"></script>
    <!-- sortable.min.js is only needed if you wish to sort / rearrange files in initial preview. This must be loaded before fileinput.min.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-fileinput/5.1.2/js/plugins/sortable.min.js" type="text/javascript"></script>
    <!-- purify.min.js is only needed if you wish to purify HTML content in your preview for HTML files. This must be loaded before fileinput.min.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-fileinput/5.1.2/js/plugins/purify.min.js" type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-fileinput/5.1.2/js/fileinput.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-fileinput/5.0.9/themes/fas/theme.min.js"></script>


    <script>
        //設定上傳套件參數
        $("#file").fileinput({
            theme: 'fas',
            uploadUrl: "./",
            maxFileCount: 5,
            fileActionSettings: { showZoom: false, showUpload: false }
        });
    </script>

    <script>

        //日期防呆
        jQuery(function () {
            jQuery('#startTime').datetimepicker({
                onShow: function (ct) {
                    this.setOptions({
                        maxDate: jQuery('#endTime').val() ? jQuery('#endTime').val() : false
                    })
                }
            });
            jQuery('#endTime').datetimepicker({
                onShow: function (ct) {
                    this.setOptions({
                        minDate: jQuery('#startTime').val() ? jQuery('#startTime').val() : false
                    })
                }
            });
        });
    </script>


}

